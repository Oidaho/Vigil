from src.routers import ButtonRouter
from src.context import Context
from typing import Dict

from src.keyboards.answers import ShowSnackbar
from db.models import Conversation


router = ButtonRouter()


@router.register(name="close", check_owner=True)
def close_button(ctx: Context, payload: Dict[str, int | str]) -> bool:
    ctx.api.messages.delete(
        peer_id=ctx.peer.id,
        cmids=ctx.button.cmid,
        delete_for_all=1,
    )

    ctx.api.messages.sendMessageEventAnswer(
        event_id=ctx.button.id,
        user_id=ctx.user.id,
        peer_id=ctx.peer.id,
        event_data=ShowSnackbar("‚ùå Closed.").json_str(),
    )

    # TODO: –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç —Å —É–¥–∞–ª–µ–Ω–∏–µ–º —É—á—Ç–µ–Ω–æ–π —Å–µ—Å—Å–∏–∏ –∏–∑ –ë–î

    return True


@router.register(name="set_mark", check_owner=True)
def set_mark_button(ctx: Context, payload: Dict[str, int | str]) -> bool:
    conversation = (
        Conversation.select().where(Conversation.peer_id == ctx.peer.id).get_or_none()
    )

    if conversation is None:
        mark = payload.get("mark")
        new_marked = Conversation(peer_id=ctx.peer.id, name=ctx.peer.name, mark=mark)
        new_marked.save()
        snackbar_message = f'üìù –ë–µ—Å–µ–¥–∞ –ø–æ–º–µ—á–µ–Ω–∞ –∫–∞–∫ "{mark}".'

    else:
        mark = conversation.mark
        snackbar_message = f'‚ùó–ë–µ—Å–µ–¥–∞ —É–∂–µ –∏–º–µ–µ—Ç –º–µ—Ç–∫—É "{mark}".'

    ctx.api.messages.sendMessageEventAnswer(
        event_id=ctx.button.id,
        user_id=ctx.user.id,
        peer_id=ctx.peer.id,
        event_data=ShowSnackbar(snackbar_message).json_str(),
    )

    return True


@router.register(name="drop_mark", check_owner=True)
def drop_mark_button(ctx: Context, payload: Dict[str, int | str]) -> bool:
    conversation = (
        Conversation.select().where(Conversation.peer_id == ctx.peer.id).get_or_none()
    )

    if conversation is not None:
        mark = conversation.mark
        conversation.delete()
        snackbar_message = f'üìù –ú–µ—Ç–∫–∞ "{mark}" —Å–Ω—è—Ç–∞ —Å –±–µ—Å–µ–¥—ã.'

    else:
        snackbar_message = "‚ùó–ë–µ—Å–µ–¥–∞ –µ—â–µ –Ω–µ –∏–º–µ–µ—Ç –º–µ—Ç–∫—É."

    ctx.api.messages.sendMessageEventAnswer(
        event_id=ctx.button.id,
        user_id=ctx.user.id,
        peer_id=ctx.peer.id,
        event_data=ShowSnackbar(snackbar_message).json_str(),
    )

    return True


@router.register(name="update_conversation", check_owner=True)
def update_conversation_button(ctx: Context, payload: Dict[str, int | str]) -> bool:
    conversation = (
        Conversation.select().where(Conversation.peer_id == ctx.peer.id).get_or_none()
    )

    if conversation is not None:
        conversation.peer_id = ctx.peer.id
        conversation.name = ctx.peer.name
        conversation.save()
        snackbar_message = "üìù –î–∞–Ω–Ω—ã–µ –±–µ—Å–µ–¥—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã."

    else:
        snackbar_message = "‚ùó–ë–µ—Å–µ–¥–∞ –µ—â–µ –Ω–µ –∏–º–µ–µ—Ç –º–µ—Ç–∫—É."

    ctx.api.messages.sendMessageEventAnswer(
        event_id=ctx.button.id,
        user_id=ctx.user.id,
        peer_id=ctx.peer.id,
        event_data=ShowSnackbar(snackbar_message).json_str(),
    )

    return True
