name: Deploy Vigil

on:
  release:
    types: [released]

jobs:
  prepare:
    runs-on: ubuntu-latest

    steps:
      - name: Set up SSH Key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts

      - name: Check and Install Docker & Docker Compose
        run: |
          ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << 'EOF'
            if ! command -v docker &> /dev/null; then
              echo "Docker не найден. Устанавливаем..."
              curl -fsSL https://get.docker.com | sh
              sudo systemctl start docker
              sudo systemctl enable docker
            else
              echo "Docker уже установлен"
            fi
            
            if ! command -v docker-compose &> /dev/null; then
              echo "Docker Compose не найден. Устанавливаем..."
              sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
              sudo chmod +x /usr/local/bin/docker-compose
            else
              echo "Docker Compose уже установлен"
            fi
          EOF

  deploy:
    runs-on: ubuntu-latest
    needs: prepare

    steps:
      - name: Set up SSH Key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts

      - name: Check Project Directory & Update Code
        run: |
          ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << 'EOF'
            PROJECT_DIR="/opt/Vigil"
            REPO_URL="https://github.com/Oidaho/Vigil.git"
            GITHUB_API_URL="https://api.github.com/repos/Oidaho/Vigil/releases/latest"

            # Получаем информацию о последнем релизе и извлекаем тег
            LATEST_RELEASE_TAG=$(curl -s $GITHUB_API_URL | jq -r .tag_name)

            if [ ! -d "$PROJECT_DIR" ]; then
              echo "Директория $PROJECT_DIR не найдена. Клонируем репозиторий..."
              git clone $REPO_URL $PROJECT_DIR
            else
              echo "Директория $PROJECT_DIR найдена. Обновляем код..."
              cd $PROJECT_DIR
              git fetch --tags
              git checkout $LATEST_RELEASE_TAG
              git pull origin $LATEST_RELEASE_TAG
            fi
          EOF
      
      - name: Create .env File
        run: |
          ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << 'EOF'
            PROJECT_DIR="/opt/Vigil"

            echo "Создаём .env файл..."
            cat << EOT > $PROJECT_DIR/.env
            # Мастер-пароль PostresSQL
            POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
            
            # Настройки Nginx Proxy Manager
            DB_POSTGRES_USER=nginx
            DB_POSTGRES_PASSWORD=${{ secrets.NPM_DB_POSTGRES_PASSWORD }}
            DB_POSTGRES_NAME=npm
            DB_POSTGRES_HOST=172.20.0.2
            DB_POSTGRES_PORT=5432

            # Настройки Vigil-bot
            VIGIL_BOT_GROUP_ID=${{ secrets.VIGIL_BOT_GROUP_ID }}
            VIGIL_BOT_GROUP_TOKEN=${{ secrets.VIGIL_BOT_GROUP_TOKEN }}

            # Настройки Vigil-web
            VIGIL_WEB_ADMIN_ID=${{ secrets.VIGIL_WEB_ADMIN_ID }}
            VIGIL_WEB_ADMIN_PASSWORD=${{ secrets.VIGIL_WEB_ADMIN_PASSWORD }}
            VIGIL_WEB_JWT_SECRET=${{ secrets.VIGIL_WEB_JWT_SECRET }}

            # Настройки подключения Vigil к БД
            VIGIL_DB_POSGRES_PASSWORD=${{ secrets.VIGIL_DB_POSGRES_PASSWORD }}
            VIGIL_DB_POSGRES_HOST=172.20.0.2
            EOT
          EOF

      - name: Stop Containers & Clean Up
        run: |
          ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << 'EOF'
            PROJECT_DIR="/opt/Vigil"
            cd $PROJECT_DIR

            echo "Останавливаем запущенные контейнеры..."
            docker-compose down
            
            echo "Очищаем кеши контейнеров..."
            docker builder prune -f

            echo "Удаляем неиспользуемые образы..."
            docker image prune -a -f
          EOF

      - name: Deploy with Docker Compose
        run: |
          ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << 'EOF'
            PROJECT_DIR="/opt/Vigil"
            cd $PROJECT_DIR

            echo "Запускаем контейнеры с обновлёнными настройками..."
            docker-compose up -d --build
          EOF
